# devhubapp/tokens.py
from datetime import datetime
from django.contrib.auth.tokens import PasswordResetTokenGenerator

class AdminPasswordResetTokenGenerator(PasswordResetTokenGenerator):
    """
    Token generator that works with the custom Administrator model.
    """

    def _make_hash_value(self, admin, timestamp):
        # Ensure admin is a User model instance, not Administrator if you've
        # transitioned to using User.is_staff for admins.
        # If 'admin' here refers to your custom Administrator model,
        # ensure it has 'pk', 'password', 'last_login_at', 'email' fields.

        # last_login_at is your custom field; normalize for hashing
        login_ts = ""
        # Use .isoformat() for a consistent string representation if it's a datetime object
        if hasattr(admin, "last_login_at") and admin.last_login_at:
            # Ensure it's timezone-naive for consistent hashing if not using USE_TZ=True
            # or convert to UTC then remove tzinfo if USE_TZ=True
            login_ts = admin.last_login_at.replace(microsecond=0, tzinfo=None).isoformat()
        else:
            # Fallback for when last_login_at is not set or not available
            login_ts = ""


        # email field (string; fallback empty)
        email = getattr(admin, "email", "") or ""

        # password is required (hashed string if set; maybe empty for new admin)
        pwd = getattr(admin, "password", "")

        # Include timestamp so tokens expire properly
        return f"{admin.pk}{pwd}{login_ts}{timestamp}{email}"

# IMPORTANT: Do NOT instantiate admin_token_generator here at module level.
# It will be instantiated where it's used (e.g., in api_views.py).